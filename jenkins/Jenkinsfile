pipeline {
  agent any

  environment {
    AWS_REGION = 'us-east-1'
  }

  parameters {
    booleanParam(name: 'DESTROY_INFRA', defaultValue: false, description: 'Destroy infrastructure after run?')
  }

  stages {
        // Optional Destroy
    stage('Terraform Destroy (Optional)') {
      when {
        expression { return params.DESTROY_INFRA == true }
      }
      steps {
        dir('terraform') {
          withCredentials([
            [$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws_cred']
          ]) {
            sh '''
              export AWS_REGION=${AWS_REGION}
              terraform destroy -auto-approve
            '''
          }
        }
      }
    }
    // Terraform Apply
    stage('Terraform Init & Apply') {
      steps {
        dir('terraform') {
          withCredentials([
            [$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-cred']
          ]) {
            sh '''
              export AWS_REGION=${AWS_REGION}
              terraform init
              terraform fmt
              terraform validate
              terraform apply -auto-approve
            '''
          }
        }
      }
    }

    // Inject SSH key path & Bastion IP into ansible.cfg
    stage('Inject Bastion IP and PEM into Ansible Config') {
      steps {
        withCredentials([
          [$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-cred'],
          [$class: 'SSHUserPrivateKeyBinding', credentialsId: 'nginx_key', keyFileVariable: 'SSH_KEY']
        ]) {
          script {
            def bastionIp = sh(script: "terraform -chdir=terraform output -raw bastion_public_ip", returnStdout: true).trim()

            // Replace placeholders in ansible.cfg
            sh """
              sed -i 's|<bastion_public_ip>|${bastionIp}|' ansible/ansible.cfg
              sed -i 's|<private_key_path>|${SSH_KEY}|' ansible/ansible.cfg
            """

            // Optional: update aws_ec2.yaml tag filter
            sh """
              sed -i 's|tag:Type: webserver|tag:NGINX_Private: yes|' ansible/aws_ec2.yaml || true
            """
          }
        }
      }
    }

    // Run Ansible
    stage('Install NGINX with Ansible') {
      steps {
        dir('ansible') {
          withCredentials([
            [$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws_cred'],
            [$class: 'SSHUserPrivateKeyBinding', credentialsId: 'nginx_key', keyFileVariable: 'SSH_KEY']
          ]) {
            sh '''
              set -e
              python3 -m venv venv
              ./venv/bin/pip install -r requirements.txt

              ./venv/bin/ansible-galaxy collection install amazon.aws

              export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
              export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY
              export AWS_REGION=${AWS_REGION}

              ./venv/bin/ansible-inventory -i aws_ec2.yaml --graph
              ./venv/bin/ansible-playbook -i aws_ec2.yaml nginx.yml
            '''
          }
        }
      }
    }
  }
}

