pipeline {
  agent any

  parameters {
    booleanParam(name: 'DESTROY_INFRA', defaultValue: false, description: 'Destroy infrastructure after run?')
  }

  environment {
    AWS_REGION = 'us-east-1'
  }

  stages {

    stage('Build AMI with Packer') {
      when {
        expression { return !params.DESTROY_INFRA }
      }
      steps {
        dir('terraform') {
          withCredentials([
            [$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-creds']
          ]) {
            sh '''
              set -e

              # ‚úÖ Install Packer if not present
              echo "üîç Checking Packer..."
              if ! command -v packer &> /dev/null; then
                echo "‚öôÔ∏è Installing Packer..."

                if [ -f /etc/debian_version ]; then
                  echo "üì¶ Installing via apt (Debian/Ubuntu)"
                  sudo apt-get update -y
                  sudo apt-get install -y gnupg curl software-properties-common
                  curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg
                  echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
                  sudo apt update -y
                  sudo apt install -y packer
                elif [ -f /etc/redhat-release ]; then
                  echo "üì¶ Installing via yum (RHEL/Amazon Linux)"
                  sudo yum install -y yum-utils
                  sudo yum-config-manager --add-repo https://rpm.releases.hashicorp.com/AmazonLinux/hashicorp.repo
                  sudo yum -y install packer
                else
                  echo "‚ùå Unsupported OS for auto-install. Please install Packer manually."
                  exit 1
                fi
              fi

              echo "‚úÖ Packer version:"
              packer version

              # Move to packer directory and build AMI
              cd ../packer

              packer build nginx_private_ami.json | tee packer-output.log

              # Extract AMI ID
              if [ -f ami_id.txt ]; then
                echo "‚úÖ AMI ID extracted from ami_id.txt"
              elif grep -q 'ami-' packer-output.log; then
                grep -o 'ami-[a-zA-Z0-9\\-]*' packer-output.log | tail -1 > ami_id.txt
              else
                echo "‚ùå AMI ID not found!" && exit 1
              fi
            '''
          }
        }
        archiveArtifacts artifacts: 'packer/packer-output.log, packer/ami_id.txt', onlyIfSuccessful: true
      }
    }

    stage('Read AMI ID') {
      when {
        allOf {
          expression { return !params.DESTROY_INFRA }
          expression { return fileExists('packer/ami_id.txt') }
        }
      }
      steps {
        script {
          env.AMI_ID = readFile('packer/ami_id.txt').trim()
          echo "Using AMI ID: ${env.AMI_ID}"
        }
      }
    }

    stage('Terraform Init & Apply') {
      when {
        expression { return !params.DESTROY_INFRA }
      }
      steps {
        dir('terraform') {
          withCredentials([
            [$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-creds']
          ]) {
            sh '''
              export AWS_REGION=${AWS_REGION}
              terraform init
              terraform fmt
              terraform validate
              terraform apply -auto-approve
            '''
          }
        }
      }
    }

    stage('Inject Bastion IP and PEM into Ansible Config') {
      when {
        expression { return !params.DESTROY_INFRA }
      }
      steps {
        withCredentials([
          [$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-creds'],
          [$class: 'SSHUserPrivateKeyBinding', credentialsId: 'nginx_key', keyFileVariable: 'SSH_KEY']
        ]) {
          script {
            def bastionIp = sh(script: "terraform -chdir=terraform output -raw bastion_public_ip", returnStdout: true).trim()
            sh """
              sed -i 's|<bastion_public_ip>|${bastionIp}|' ansible/ansible.cfg
              sed -i 's|<private_key_path>|${SSH_KEY}|' ansible/ansible.cfg
              sed -i 's|tag:Type: webserver|tag:NGINX_Private: yes|' ansible/aws_ec2.yaml || true
            """
          }
        }
      }
    }

    stage('Install NGINX with Ansible') {
      when {
        expression { return !params.DESTROY_INFRA }
      }
      steps {
        dir('ansible') {
          withCredentials([
            [$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-creds'],
            [$class: 'SSHUserPrivateKeyBinding', credentialsId: 'nginx_key', keyFileVariable: 'SSH_KEY']
          ]) {
            sh '''
              set -e
              python3 -m venv venv
              ./venv/bin/pip install -r requirements.txt
              ./venv/bin/ansible-galaxy collection install amazon.aws

              export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
              export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY
              export AWS_REGION=${AWS_REGION}

              ./venv/bin/ansible-inventory -i aws_ec2.yaml --graph
              ./venv/bin/ansible-playbook -i aws_ec2.yaml nginx.yml
            '''
          }
        }
      }
    }

    stage('Terraform Destroy (Optional)') {
      when {
        expression { return params.DESTROY_INFRA == true }
      }
      steps {
        dir('terraform') {
          withCredentials([
            [$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-creds']
          ]) {
            sh '''
              export AWS_REGION=${AWS_REGION}
              terraform destroy -auto-approve
            '''
          }
        }
      }
    }
  }

  post {
    success {
      slackSend (
        channel: '#all-arizona',
        color: 'good',
        message: "*Tool Evaluation Pipeline* completed successfully. <${env.BUILD_URL}|View Job>"
      )
      mail to: 'shreekadam2222htb@gmail.com',
           subject: 'SUCCESS: Tool Evaluation Pipeline',
           body: "Build #${env.BUILD_NUMBER} succeeded.\n\nCheck Jenkins for details:\n${env.BUILD_URL}"
    }
    failure {
      slackSend (
        channel: '#all-arizona',
        color: 'danger',
        message: "*Tool Evaluation Pipeline* failed. <${env.BUILD_URL}|View Job>"
      )
      mail to: 'shreekadam2222htb@gmail.com',
           subject: 'FAILURE: Tool Evaluation Pipeline',
           body: "Build #${env.BUILD_NUMBER} failed.\n\nCheck Jenkins for details:\n${env.BUILD_URL}"
    }
    always {
      archiveArtifacts artifacts: '**/*.log, packer/ami_id.txt', onlyIfSuccessful: true
    }
  }
}
