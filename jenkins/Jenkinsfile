pipeline {
  agent any

  environment {
    AWS_REGION = 'us-east-1'
  }

  stages {
    stage('Checkout') {
      steps {
        git url: 'https://github.com/ShreeKadam/tool-evaluation.git', branch: 'main'
      }
    }

    stage('Terraform Init & Apply') {
      steps {
        dir('terraform') {
          withCredentials([[
            $class: 'AmazonWebServicesCredentialsBinding',
            credentialsId: 'aws-creds'
          ]]) {
            sh 'terraform init'
            sh 'terraform apply -auto-approve'
          }
        }
      }
    }

    stage('Inject Bastion IP into Ansible Config') {
      steps {
        script {
          def bastionIp = sh(script: "terraform -chdir=terraform output -raw bastion_public_ip", returnStdout: true).trim()
          sh "sed -i 's|<bastion_public_ip>|${bastionIp}|' ansible/ansible.cfg"
        }
      }
    }

    stage('Install NGINX with Ansible') {
      steps {
        dir('ansible') {
          sh '''
            python3 -m venv venv
            . venv/bin/activate
            pip install --upgrade pip
            pip install -r requirements.txt
            venv/bin/ansible-inventory -i aws_ec2.yaml --graph
            venv/bin/ansible-playbook nginx.yml
          '''
        }
      }
    }

    stage('Terraform Destroy (Optional)') {
      when {
        expression { return params.DESTROY_INFRA == true }
      }
      steps {
        dir('terraform') {
          sh 'terraform destroy -auto-approve'
        }
      }
    }
  }

  parameters {
    booleanParam(name: 'DESTROY_INFRA', defaultValue: false, description: 'Destroy infrastructure after run?')
  }
}
