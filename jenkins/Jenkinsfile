pipeline {
  agent any

  environment {
    AWS_REGION = 'us-east-1' // or your region
  }

  stages {
    stage('Terraform Init & Apply') {
      steps {
        dir('terraform') {
          withCredentials([[
            $class: 'AmazonWebServicesCredentialsBinding',
            credentialsId: 'aws-creds'
          ]]) {
            sh 'terraform init'
            sh 'terraform apply -auto-approve'
          }
        }
      }
    }

    stage('Inject Bastion IP into Ansible Config') {
      steps {
        script {
          def bastionIp = sh(
            script: "terraform -chdir=terraform output -raw bastion_public_ip",
            returnStdout: true
          ).trim()
          sh "sed -i 's|<bastion_public_ip>|${bastionIp}|' ansible/ansible.cfg"
        }
      }
    }

    stage('Install NGINX with Ansible') {
      steps {
        dir('ansible') {
          withCredentials([
            file(credentialsId: 'shared-key-pem', variable: 'SSH_KEY_FILE'),
            [
              $class: 'AmazonWebServicesCredentialsBinding',
              credentialsId: 'aws-creds'
            ]
          ]) {
            sh '''
              ansible-playbook -i aws_ec2.yaml nginx.yml --private-key $SSH_KEY_FILE
            '''
          }
        }
      }
    }

    stage('Terraform Destroy (Optional)') {
      when {
        expression { return false }  // Change to true if you want auto destroy
      }
      steps {
        dir('terraform') {
          withCredentials([[
            $class: 'AmazonWebServicesCredentialsBinding',
            credentialsId: 'aws-creds'
          ]]) {
            sh 'terraform destroy -auto-approve'
          }
        }
      }
    }
  }
}
