pipeline {
  agent any

  parameters {
    booleanParam(name: 'DESTROY_INFRA', defaultValue: false, description: 'Destroy infrastructure after run?')
  }

  environment {
    AWS_REGION = 'us-east-1'
  }

  stages {

    stage('Read AMI ID') {
      when {
        expression { return !params.DESTROY_INFRA }
      }
      steps {
        script {
          env.AMI_ID = readFile('ami_id.txt').trim()
          echo "Using AMI ID: ${env.AMI_ID}"
        }
        archiveArtifacts artifacts: 'ami_id.txt', onlyIfSuccessful: true
      }
    }

    stage('Terraform Init & Apply') {
      when {
        expression { return !params.DESTROY_INFRA }
      }
      steps {
        dir('terraform') {
          withCredentials([
            [$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-creds']
          ]) {
            sh '''
              set -e
              export AWS_REGION=${AWS_REGION}
              terraform init | tee terraform-init.log
              terraform fmt
              terraform validate | tee terraform-validate.log
              terraform apply -auto-approve -var="ami_id=${AMI_ID}" | tee terraform-apply.log
            '''
          }
        }
        archiveArtifacts artifacts: 'terraform/*.log', onlyIfSuccessful: true
      }
    }

    stage('Inject Bastion IP and PEM into Ansible Config') {
      when {
        expression { return !params.DESTROY_INFRA }
      }
      steps {
        withCredentials([
          [$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-creds'],
          [$class: 'SSHUserPrivateKeyBinding', credentialsId: 'nginx_key', keyFileVariable: 'SSH_KEY']
        ]) {
          script {
            def bastionIp = sh(
              script: "terraform -chdir=terraform output -raw bastion_public_ip",
              returnStdout: true
            ).trim()

            echo "Injecting Bastion IP: ${bastionIp}"

            sh """
              sed -i 's|<bastion_public_ip>|${bastionIp}|' ansible/ansible.cfg
              sed -i 's|<private_key_path>|${SSH_KEY}|' ansible/ansible.cfg
              sed -i 's|tag:Type: webserver|tag:NGINX_Private: yes|' ansible/aws_ec2.yaml || true
            """
          }
        }
      }
    }

    stage('Install NGINX with Ansible') {
      when {
        expression { return !params.DESTROY_INFRA }
      }
      steps {
        dir('ansible') {
          withCredentials([
            [$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-creds'],
            [$class: 'SSHUserPrivateKeyBinding', credentialsId: 'nginx_key', keyFileVariable: 'SSH_KEY']
          ]) {
            sh '''
              set -e
              python3 -m venv venv
              ./venv/bin/pip install -r requirements.txt
              ./venv/bin/ansible-galaxy collection install amazon.aws

              export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
              export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY
              export AWS_REGION=${AWS_REGION}

              ./venv/bin/ansible-inventory -i aws_ec2.yaml --graph | tee ansible-inventory.log
              ./venv/bin/ansible-playbook -i aws_ec2.yaml nginx.yml | tee ansible-playbook.log
            '''
          }
        }
        archiveArtifacts artifacts: 'ansible/*.log', onlyIfSuccessful: true
      }
    }

    stage('Terraform Destroy (Optional)') {
      when {
        expression { return params.DESTROY_INFRA == true }
      }
      steps {
        dir('terraform') {
          withCredentials([
            [$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-creds']
          ]) {
            script {
              def amiId = readFile('../ami_id.txt').trim()
              sh """
                set -e
                export AWS_REGION=${AWS_REGION}
                terraform init
                terraform destroy -auto-approve -var="ami_id=${amiId}" | tee terraform-destroy.log
              """
            }
          }
        }
        archiveArtifacts artifacts: 'terraform/terraform-destroy.log', onlyIfSuccessful: true
      }
    }
  }

  post {
    always {
      echo 'Pipeline finished. Archiving logs and sending notifications.'
    }

    success {
      slackSend(channel: '#all-arizona', color: 'good', message: "*SUCCESS* - Job: ${env.JOB_NAME} #${env.BUILD_NUMBER} (<${env.BUILD_URL}|View>)")
      emailext(
        subject: "SUCCESS: ${env.JOB_NAME} #${env.BUILD_NUMBER}",
        body: """<p>SUCCESS</p>
                 <p>Job: ${env.JOB_NAME}<br>
                 Build: <a href='${env.BUILD_URL}'>#${env.BUILD_NUMBER}</a></p>""",
        to: 'shreekadam2222htb@gmail.com'
      )
    }

    failure {
      slackSend(channel: '#all-arizona', color: 'danger', message: "*FAILURE* - Job: ${env.JOB_NAME} #${env.BUILD_NUMBER} (<${env.BUILD_URL}|View>)")
      emailext(
        subject: "FAILURE: ${env.JOB_NAME} #${env.BUILD_NUMBER}",
        body: """<p>FAILURE</p>
                 <p>Job: ${env.JOB_NAME}<br>
                 Build: <a href='${env.BUILD_URL}'>#${env.BUILD_NUMBER}</a></p>""",
        to: 'shreekadam2222htb@gmail.com'
      )
    }
  }
}
