pipeline {
  agent any

  environment {
    AWS_REGION = 'us-east-1'
  }

  stages {
    stage('Checkout') {
      steps {
        git url: 'https://github.com/ShreeKadam/tool-evaluation.git', branch: 'main'
      }
    }

    stage('Terraform Init & Apply') {
      steps {
        withCredentials([[
          $class: 'AmazonWebServicesCredentialsBinding',
          credentialsId: 'aws-creds'
        ]]) {
          sh '''
            terraform -chdir=terraform init
            terraform -chdir=terraform apply -auto-approve
          '''
        }
      }
    }

    stage('Prepare PEM Key') {
      steps {
        withCredentials([[
          $class: 'AmazonWebServicesCredentialsBinding',
          credentialsId: 'aws-creds'
        ]]) {
          sh '''
            aws s3 cp s3://your-secure-bucket/shared-key.pem ./shared-key.pem
            chmod 600 ./shared-key.pem
          '''
        }
      }
    }

    stage('Inject Bastion IP into Ansible Config') {
      steps {
        script {
          def bastionIp = sh(script: "terraform -chdir=terraform output -raw bastion_public_ip", returnStdout: true).trim()
          sh "sed -i 's|<bastion_public_ip>|${bastionIp}|' ansible/ansible.cfg"
        }
      }
    }

    stage('Install NGINX with Ansible') {
      steps {
        dir('ansible') {
          withCredentials([file(credentialsId: 'shared-key-pem', variable: 'PEM_KEY')]) {
            sh '''
              ./venv/bin/ansible-playbook -i aws_ec2.yaml nginx.yml --private-key $PEM_KEY
            '''
          }
        }
      }
    }

    stage('Terraform Destroy (Optional)') {
      when {
        expression { return false } // skip by default, enable if needed
      }
      steps {
        withCredentials([[
          $class: 'AmazonWebServicesCredentialsBinding',
          credentialsId: 'aws-creds'
        ]]) {
          sh 'terraform -chdir=terraform destroy -auto-approve'
        }
      }
    }
  }
}
