pipeline {
  agent any

  parameters {
    booleanParam(name: 'DESTROY_INFRA', defaultValue: false, description: 'Destroy infrastructure after run?')
  }

  environment {
    AWS_REGION = 'us-east-1'
  }

  stages {
    stage('Terraform Init') {
      when {
        expression { return !params.DESTROY_INFRA }
      }
      steps {
        dir('terraform') {
          withCredentials([
            [$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-creds']
          ]) {
            sh '''
              export AWS_REGION=${AWS_REGION}
              terraform init
            '''
          }
        }
      }
    }

    stage('Terraform FMT') {
      when {
        expression { return !params.DESTROY_INFRA }
      }
      steps {
        dir('terraform') {
          sh 'terraform fmt'
        }
      }
    }

    stage('Terraform Validate') {
      when {
        expression { return !params.DESTROY_INFRA }
      }
      steps {
        dir('terraform') {
          withCredentials([
            [$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-creds']
          ]) {
            sh 'terraform validate'
          }
        }
      }
    }

    stage('Terraform Plan') {
      when {
        expression { return !params.DESTROY_INFRA }
      }
      steps {
        dir('terraform') {
          withCredentials([
            [$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-creds']
          ]) {
            sh 'terraform plan'
          }
        }
      }
    }

    stage('Approve Terraform Apply') {
      when {
        expression { return !params.DESTROY_INFRA }
      }
      steps {
        input message: 'Do you want to proceed with Terraform Apply?'
      }
    }

    stage('Terraform Apply') {
      when {
        expression { return !params.DESTROY_INFRA }
      }
      steps {
        dir('terraform') {
          sh 'terraform apply -auto-approve'
        }
      }
    }

    stage('Inject Bastion IP and PEM into Ansible Config') {
      when {
        expression { return !params.DESTROY_INFRA }
      }
      steps {
        withCredentials([
          [$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-creds'],
          [$class: 'SSHUserPrivateKeyBinding', credentialsId: 'nginx_key', keyFileVariable: 'SSH_KEY']
        ]) {
          script {
            def bastionIp = sh(script: "terraform -chdir=terraform output -raw bastion_public_ip", returnStdout: true).trim()
            sh """
              sed -i 's|<bastion_public_ip>|${bastionIp}|' ansible/ansible.cfg
              sed -i 's|<private_key_path>|${SSH_KEY}|' ansible/ansible.cfg
              sed -i 's|tag:Type: webserver|tag:NGINX_Private: yes|' ansible/aws_ec2.yaml || true
            """
          }
        }
      }
    }

    stage('Install NGINX with Ansible') {
      when {
        expression { return !params.DESTROY_INFRA }
      }
      steps {
        dir('ansible') {
          withCredentials([
            [$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-creds'],
            [$class: 'SSHUserPrivateKeyBinding', credentialsId: 'nginx_key', keyFileVariable: 'SSH_KEY']
          ]) {
            sh '''
              set -e
              python3 -m venv venv
              ./venv/bin/pip install -r requirements.txt
              ./venv/bin/ansible-galaxy collection install amazon.aws

              export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
              export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY
              export AWS_REGION=${AWS_REGION}

              ./venv/bin/ansible-inventory -i aws_ec2.yaml --graph
              ./venv/bin/ansible-playbook -i aws_ec2.yaml nginx.yml
            '''
          }
        }
      }
    }

    stage('Approve Terraform Destroy') {
      when {
        expression { return params.DESTROY_INFRA }
      }
      steps {
        input message: 'Are you sure you want to destroy the infrastructure?'
      }
    }

    stage('Terraform Destroy (Optional)') {
      when {
        expression { return params.DESTROY_INFRA == true }
      }
      steps {
        dir('terraform') {
          withCredentials([
            [$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-creds']
          ]) {
            sh '''
              export AWS_REGION=${AWS_REGION}
              terraform destroy -auto-approve
            '''
          }
        }
      }
    }
  }

  post {
    success {
      slackSend (
        channel: '#all-arizona',
        color: 'good',
        message: "*Tool Evaluation Pipeline* completed successfully. <${env.BUILD_URL}|View Job>"
      )
      mail to: 'shreekadam2222htb@gmail.com',
           subject: 'SUCCESS: Tool Evaluation Pipeline',
           body: "Build #${env.BUILD_NUMBER} succeeded.\n\nCheck Jenkins for details:\n${env.BUILD_URL}"
    }
    failure {
      slackSend (
        channel: '#all-arizona',
        color: 'danger',
        message: "*Tool Evaluation Pipeline* failed. <${env.BUILD_URL}|View Job>"
      )
      mail to: 'shreekadam2222htb@gmail.com',
           subject: 'FAILURE: Tool Evaluation Pipeline',
           body: "Build #${env.BUILD_NUMBER} failed.\n\nCheck Jenkins for details:\n${env.BUILD_URL}"
    }
    always {
      archiveArtifacts artifacts: '**/*.log, packer/ami_id.txt', onlyIfSuccessful: true
    }
  }
}
